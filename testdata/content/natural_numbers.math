[\natural]
Describes: n
satisfying:
. generated:
  from: 0, succ(n)
  when: 'n is \natural'
Codified:
. written: "\textrm{natural}"
Providing:
. suffix: ++(n)
  when: 'n is \natural'
  defines: '\natural.succ(n)'
. infix: +(n, m)
  when: 'n, m is \natural'
  defines: 'n \natural.+/ m'
. infix: >=(n, m)
  when: 'n, m is \natural'
  states: 'n \natural.>=/ m'
. infix: >(n, m)
  when: 'n, m is \natural'
  states: 'n \natural.>/ m'
. infix: <=(n, m)
  when: 'n, m is \natural'
  states: 'n \natural.<=/ m'
. infix: <(n, m)
  when: 'n, m is \natural'
  states: 'n \natural.</ m'


Specify:
. zero:
  defines: '\natural.0'
. positiveInt:
  is: '\natural'


[\natural.set]
Describes: N := {n | ...}
satisfying:
. 'n is \natural'
Codified:
. written: "\mathbb{N}"


Axiom:
then: '0 is \natural'


Axiom:
given: n
where: 'n is \natural'
then: 'n++ is \natural'


Axiom:
then:
. not:
  . exists: n
    where: 'n is \natural'
    suchThat:
    . 'n++ = 0'


Axiom:
given: n, m
where: 'n, m is \natural'
suchThat: 'n != m'
then: 'n++ != m++'


[\property:of{T}(x)]
Describes: P(x)
when: 'T is [:type:]'
extends: 'P is [:statement:]'
satisfying:
. forAll: x
  where: 'x is T'
  then:
  . oneOf:
    . 'P(x) is true'
    . not:
      . 'P(x) is true'


Axiom:
given: P(n)
where: 'P is \property:of{\naturals}'
suchThat:
. 'P(0) is true'
. forAll: n
  where: 'n is \natural'
  then:
  . if: 'P(n) is true'
    then: 'P(n++) is true'
then:
. forAll: n
  where: 'n is \natural'
  then: 'P(n) is true'


[n \natural.+/ m]
Declares: f(n, m)
when: 'n, m is \natural'
means: 'f(n, m) is \natural'
defining:
. 'f(0, m) := m'
. if:
  . exists: d
    where: 'd is \natural'
    suchThat: 'n = d++'
  then:
  . 'f(n, m) := f(d, m)++'


Theorem:
given: n
where: 'n is \natural'
then: 'n + 0 = n'


Theorem:
given: n, m
where: 'n, m is \natural'
then: 'n + (m++) = (n + m)++'


Theorem: "Addition is commutative"
given: n, m
where: 'n, m is \natural'
then: 'n + m = m + n'


Theorem: "Addition is associative"
given: a, b, c
where: 'a, b, c is \natural'
then: '(a + b) + c = a + (b + c)'


Theorem: "Cancellation law"
given: a, b, c
where: 'a, b, c is \natural'
suchThat: 'a + b = a + c'
then: 'b = c'


[\positive.natural]
Describes: n
extends: 'n is \natural'
satisfying: 'n != 0'
Codified:
. written: "\textrm{positive natural}"


Theorem:
given: a, b
where:
. 'a is \positive.natural'
. 'b is \natural'
then:
. 'a + b is \positive.natural'


Theorem:
given: a, b
where: 'a, b is \natural'
suchThat: 'a + b = 0'
then:
. allOf:
  . 'a = 0'
  . 'b = 0'


Theorem:
given: a
where: 'a is \positive.natural'
then:
. existsUnique: b
  where: 'b is \natural'
  suchThat: 'b++ = a'


[n \natural.>=/ m]
States:
when: 'n, m is \natural'
that:
. exists: a
  where: 'a is \natural'
  suchThat: 'n = m + a'
Codified:
. written:
  . "%n \textrm{is greater than or equal to } %m"


[n \natural.<=/ m]
States:
when: 'n, m is \natural'
that: 'm >= n'
Codified:
. written:
  . "%n \textrm{is less than or equal to } %m"


[n \natural.>/ m]
States:
when: 'n, m is \natural'
that:
. 'n != m'
. 'n >= m'
Codified:
. written:
  . "%n \textrm{is strictly greater than } %m"


[n \natural.>/ m]
States:
when: 'n, m is \natural'
that:
. 'n != m'
. 'n <= m'
Codified:
. written:
  . "%n \textrm{is strictly less than } %m"


Theorem:
given: a, b, c
where: 'a, b, c is \natural'
then:
. 'a >= a'
. if:
  . 'a >= b'
  . 'b >= c'
  then:
  . 'a >= c'
. if:
  . 'a >= b'
  . 'b >= a'
  then:
  . 'a = b'
. iff: 'a >= b'
  then: 'a + c >= b + c'
. iff: 'a < b'
  then: 'a++ < b'
. iff: 'a < b'
  then:
  . exists: d
    where: 'd is \positive.integer'
    then: 'b = a + d'


Theorem: "Trichotomy of order for natural numbers"
given: a, b
where: 'a, b is \natural'
then:
. oneOf:
  . 'a < b'
  . 'a = b'
  . 'a > b'
