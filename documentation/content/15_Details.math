::
# MathLingua Details

The [Introduction](#/content/10_Introduction.math) gave a
brief overview of what MathLingua provides.  Here we get
into more details about some of the specifics related to
rendering LaTeX code and the analyzes the MathLingua
tooling provides.

## MathLingua LaTeX Rendering

As covered in more detail in the
[A Tour of MathLingua](#/content/30_A_Tour_of_MathLingua.math)
section, LaTeX code can be used to express what mathematical
statements look like as well as provide additional background
text.

Specifically, any LaTeX code can be used that is supported
by [KaTeX](https://katex.org/docs/supported.html), which
MathLingua uses for rendering.

## MathLingua Analysis Details

When the MathLingua tooling analyzes MathLingua code it
specifically identifies the following:

* symbols and definitions referenced that have not been defined
* symbols and defintions that have been defined more than once
* `is` descriptions that are invalid as described below
* `is` descriptions that are circular as described below
* using definitions with the wrong number of input parameters
* text that does not conform to the MathLingua grammar

### Invalid `is` Descriptions

Consider the following definitions that are brief for
illustrative purposes:

```math
[\set]
Defines: X
means: "A collection of objects"
written: "\textrm{set}"
```
```math
[\function:on{A}:to{B}]
Defines: f(x)
when: 'A, B is \set'
means:
. forAll: t
  suchThat: 't in A'
  then: 'f(t) in B'
written: "\textrm{function from } A? \textrm{ to } B?"
```
```math
[\bounded.function:on{A}:to{B}]
Defines: f(x)
when: "..."
means:
. 'f is \function:on{A}:to{B}'
. "..."
written: "..."
```
```math
[\continuous.function:on{A}:to{B}]
Defines: f(x)
when: "..."
means:
. 'f is \function:on{A}:to{B}'
. "..."
written: "..."
```
In the definitions above, `\set` and `\function:on{A}:to{B}`
are called *terminal definitions* because they do not contain
any `is`, `in`, or `:=` expressions in their `means:`
sections.

A MathLingua statement is said to have *invalid `is`
descriptions* if the `is` descriptions specify that some
symbol is defined to have more than one terminal definition.

As an example, suppose `f(x)` is specified such that
```
f(x) is \bounded.function:on{A}:to{B}
```
this means the terminal definition `\function:on{A}:to{B}`
applies to `f(x)` because `\bounded.function:on{A}:to{B}`
has an `is` expression in its `means:` sections that specifies
that the thing being defined is a `\function:on{A}:to{B}`.

Similarly, saying that
```
f(x) is \continuous.function:on{A}:to{B}
```
means that `f(x)` has `function:on{A}:to{B}` as a
terminal definition.

Thus, the definition
```math
[\some.function:on{A}:to{B}]
Defines: f(x)
when: "..."
means:
. 'f(x) is \bounded.function:on{A}:to{B}'
. 'f(x) is \continuous.function:on{A}:to{B}'
written: "..."
```
does not have any invalid `is` descriptions because
both `is` descriptions in the `means:` section specify
that `f(x)` has a single terminal definition
`\function:on{A}:to{B}`.

However, the following definition has invalid `is`
descriptions:
```math
[\another.function:on{A}:to{B}]
Defines: f(x)
when: "..."
means:
. 'f(x) is \bounded.function:on{A}:to{B}'
. 'f(x) is \continuous.function:on{A}:to{B}'
. 'f(x) is \set'
written: "..."
```
This is because the `is` descriptions
```
f(x) is \bounded.function:on{A}:to{B}
```
and
```
f(x) is \continuous.function:on{A}:to{B}
```
specify that `f(x)` has the terminal definition
`\function:on{A}:to{B}` juast as in the
`\some.function:on{A}:to{B}` example above.

However, the `is` description
```
f(x) is \set
```
specifies that `f(x)` also has the terminal definition
`\set`.

Thus, `f(x)` has two terminal definitions,
`\function:on{A}:to{B}` and `\set` and thus has invalid
`is` descriptions.


### Circular `is` Descriptions

A MathLingua statement is said to have *circular `is`
descriptions*, if the `is` descriptions form a cycle.

That is, consider the definitions:
```math
[\A]
Defines: A
means: 'A is \B'
written: "A"
```
```math
[\B]
Defines: B
means: 'B is \A'
written: "B"
```
The `is` descriptions in these definitions form a cycle
because if `A is \A`, then `A is \B`, but that means
`A is \A`, forming a cycle.
::